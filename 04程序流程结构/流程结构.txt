c/c++最基本的三种程序运行结构：
顺序结构
选择结构
循环结构

顺序结构 最基本的结构 代码的执行就是顺序执行
  

选择结构
if语句
 
 - 单行if 条件满足进入，不满足则不执行
 if(条件表达式){
    语句;
 }
 
 - 多行if 满足执行if，不满足执行else部分内容
 if(条件表达式){
    语句1;
 }else{
    语句2;
 }

 - 多条件if 添加多个if语句添加判断条件
 if(条件表达式){
    语句1;
 }else if(条件表达式){
    语句2;
 }...else{
    语句n ;
 }
 
 嵌套if

 三目运算符
 在c++中三目运算符返回的是变量，可以继续赋值
 a = 10,b = 20;
 (a>b?a:b) = 100; // a =10 ,b =100


switch 选择语句

switch(表达式){
    case 结果1：
      执行语句
      break; //退出当前的分支语句 如果不加会一直执行结束
    case 结果2：
      执行语句
      break;
    ...
    default: //前者都不满足就执行当前代码
      执行语句
      break;
}

if与switch的区别？
switch缺点，判断时候只能是整型或者是字符型，不可以是一个区间
switch优点，结构清晰，执行效率高


循环结构
  - 只要循环条件的结果为真，就执行循环结构

while循环
while(循环条件){
    循环语句;
}
// 要注意循环条件的设置 避免进入死循环

do-while循环
do{
   循环语句
}while(循环条件)
// do-while语句会先执行一次循环条件，再判断循环条件

for循坏

for(起始表达式；条件表达式；末尾循环体){
   循环语句;
}

嵌套循环
for(){
   for(){
      ...
   }
}


break语句
作用：跳出选择语句或者循环结构
使用的时机：
  出现再switch条件语句中，作用是终止case并跳出switch
  出现在循环语句中，作用是跳出当前的循环语句
  出现再嵌套循环中，跳出最近的内层循环语句

continue语句
作用：再循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下次循环

break会退出循环，而continue不会


goto 语句
作用：无视循序结构。直接可以进行跳转
十分强大，慎用慎用
goto 标记
...(跳过这些部分)
标记：
...
尽量不用，以免造成程序混乱